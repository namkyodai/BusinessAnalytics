install_github("ropensci/plotly")
install.packages("RWordPress")
153000/53
install.packages("RemixAutoML")
library(RemixAutoML)
library(data.table)
library(devtools)
# No Remotes ----
# Attachments ----
to_install <- c("catboost", "caTools", "data.table", "doParallel", "foreach", "forecast", "ggplot2", "h2o", "itertools", "lubridate", "monreg", "pROC", "RColorBrewer", "recommenderlab", "ROCR", "scatterplot3d", "stringr", "tm", "tsoutliers", "wordcloud", "xgboost", "zoo")
for (i in to_install) {
message(paste("looking for ", i))
if(i == "catboost" & !requireNamespace(i)) {
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
} else if(i == "h2o" & !requireNamespace(i)) {
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/rel-yates/3/R")
} else if (!requireNamespace(i)) {
message(paste("     installing", i))
install.packages(i)
}
}
install.packages("catboost")
install.packages("installr")
library(installr)
install.packages("chartbookR")
library(devtools)
install_github("kilianreber/chartbookR")
zoo <- getBBG(tickers=c("USMMMANU", "PRODMANO", "PRODMANH"), names=c("Employment", "Output", "Productivity"), freq="QUARTERLY", time="31Y")
zoo
library(zoo)
zoo <- getBBG(tickers=c("USMMMANU", "PRODMANO", "PRODMANH"), names=c("Employment", "Output", "Productivity"), freq="QUARTERLY", time="31Y")
library(chartbookR)
library(chartbookR)
install.packages("Rtools")
library(Rtools)
install.packages("Rtools")
1200000/53
install.packages("tidyverse")
library(purrr)
library(readxl)
file <- 'data.xlsx'
file
sheets <- excel_sheets(file)
file <- 'data.xlsx'
sheets <- excel_sheets(file)
file <- 'data.xlsm'
sheets <- excel_sheets(file)
setwd("C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine")
file <- 'data.xlsm'
sheets <- excel_sheets(file)
df <- map_df(sheets, ~ read_excel(file, sheet = .x, skip = 14))
df
df <- map_df(sheets, ~ read_excel(file, sheet = .x, skip = 1))
df
View(df)
file <- 'data.xlsx'
sheets <- excel_sheets(file)
df <- map_df(sheets, ~ read_excel(file, sheet = .x, skip = 1))
df
df <- map_df(sheets, ~ read_excel(file, sheet = 1, col_names = TRUE,skip = 1))
df
View(df)
file <- 'data.xlsx'
sheets <- excel_sheets(file)
df <- map_df(sheets, ~ read_excel(file, sheet = 1, skip = 1))
View(df)
df <- map_df(sheets, ~ read_excel(file, sheet = 1, col_names = TRUE,skip = 1))
View(df)
df <- map_df(sheets, ~ read_excel(file, sheet = 1, col_names = TRUE,col_types = NULL,skip = 1))
View(df)
library(purrr)
library(readxl)
file <- 'data.xlsx'
sheets <- excel_sheets(file)
df <- map_df(sheets, ~ read_excel(file, sheet = 1, col_names = TRUE,col_types = NULL,skip = 1))
View(df)
df <- map_df(sheets, ~ read_excel(file, sheet = 1))
View(df)
df <- map_df(sheets, ~ read_excel(file, sheet = 1))
library(data.table)
library(foreach)
xls.files = dir(pattern = "xlsx")
l = foreach(i = 1:length(xlsx.files)) %do% {
f = read_excel(xlsx.files[i])
setDT(f)
f[, label := xlsx.files[i]]
}
file = dir(pattern = "xlsx")
l = foreach(i = 1:length(xlsx.files)) %do% {
f = read_excel(xlsx.files[i])
setDT(f)
f[, label := xlsx.files[i]]
}
library(openxlsx)
install.packages("openxlsx")
path <- "/xlsx"
merge_file_name <- "//merged_file.xlsx"
filenames_list <- list.files(path= path, full.names=TRUE)
All <- lapply(filenames_list,function(filename){
print(paste("Merging",filename,sep = " "))
read.xlsx(filename)
})
df <- do.call(rbind.data.frame, All)
write.xlsx(df,merge_file_name)
df
library(openxlsx)
write.xlsx(df,merge_file_name)
#path <- "/xlsx"
merge_file_name <- "merged_file.xlsx"
filenames_list <- list.files(path= path, full.names=TRUE)
All <- lapply(filenames_list,function(filename){
print(paste("Merging",filename,sep = " "))
read.xlsx(filename)
})
df <- do.call(rbind.data.frame, All)
write.xlsx(df,merge_file_name)
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
setwd("C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine")
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
path <- "data.xlsx"
merge_file_name <- "merged_file.xlsx"
filenames_list <- list.files(path= path, full.names=TRUE)
All <- lapply(filenames_list,function(filename){
print(paste("Merging",filename,sep = " "))
read.xlsx(filename)
})
df <- do.call(rbind.data.frame, All)
write.xlsx(df,merge_file_name)
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
pkg <- c("XLConnect")
install.packages("XLConnect")
library(XLConnect)
# load excel workbook
excel <- loadWorkbook("data.xlsx") # change to match your path
excel
# get sheet names
sheet_names <- getSheets(excel)
names(sheet_names) <- sheet_names
sheet_names
names(sheet_names)
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorksheet(object=excel, .sheet)})
sheet_list
# load excel workbook
excel <- loadWorkbook("data.xlsx") # change to match your path
# get sheet names
sheet_names <- getSheets(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorksheet(object=excel, .sheet)})
sheet_list
# limit sheet_list to sheets with at least 1 dimension
sheet_list2 <- sheet_list[sapply(sheet_list, function(x) dim(x)[1]) > 0]
sheet_list2
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2)))
data()
data
sheet_list2
for (i in 2:length(sheet_list2)){assign(paste0("df", i), as.data.frame(sheet_list2[i]))}
sheet_list2
# code to read in each excel worksheet as individual dataframes
for (i in 2:length(sheet_list2)){assign(paste0("df", i), as.data.frame(sheet_list2[i]))}
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2)))
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data
View(data)
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
df$Year <- as.POSIXct(excel_data$Date,
origin="1899-12-30",
tz="GMT")
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
df$Year <- as.POSIXct(df$Date, origin="1899-12-30", tz="GMT")
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
df$Year <- as.POSIXct(df$Date, origin="1899-12-30", tz="GMT")
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
# return cleaned df
return(df)
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
sheet_list2
data <- do.call(rbind,lapply(names(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2)),quote = FALSE)
d<-lapply(names(sheet_list2))
d<-lapply(sheet_list2)
names(sheet_list2)
total <- rbind(names(sheet_list2))
total
total <- rbind(sheet_list2)
total
sheet_list2
sheet_list2$`1`
total <- rbind(sheet_list2$`1`,sheet_list2$`2`)
total
View(total)
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
# df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
# clean sheets and create one data frame
# data <- do.call(rbind,lapply(seq_along(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
View(data)
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
excel <- loadWorkbook("data.xlsm") # change to match your path
# get sheet names
sheet_names <- getSheets(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorksheet(object=excel, .sheet)})
View(sheet_list)
file='data.xlsx'
a=read.xlsx(file, 1, header=TRUE)
a=read.xlsx(excel, 1, header=TRUE)
a=read.xlsx(file, 1)
a
file='data.xlsm'
a=read.xlsx(file, 1)
a
sheet_list1 <- lapply(sheet_names, function(.sheet){read.xlsx(object=excel, .sheet)})
excel
file='data.xlsm'
a=read.xlsx(file, 1)
sheet_list1 <- lapply(sheet_names, function(.sheet){read.xlsx(object=file, .sheet)})
sheet_list1 <- lapply(sheet_names, function(.sheet){read.xlsx(file, .sheet)})
sheet_list1
# ----------------
library(readxl)
read_excel_allsheets <- function(file, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(file)
x <- lapply(sheets, function(X) readxl::read_excel(file, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
mysheets <- read_excel_allsheets("data.xlsx")
mysheets
# ----------------
library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
mysheets <- read_excel_allsheets("data.xlsx")
sheet_list
# limit sheet_list to sheets with at least 1 dimension
sheet_list2 <- sheet_list[sapply(sheet_list, function(x) dim(x)[1]) > 0]
sheet_list2
library(XLConnect)
mysheets <- read_excel_allsheets("data.xlsm")
mysheets
sheet_names
sheet_list2
library(XLConnect)
# load excel workbook
excel <- loadWorkbook("data.xlsx") # change to match your path
# get sheet names
sheet_names <- getSheets(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorksheet(object=excel, .sheet)})
# limit sheet_list to sheets with at least 1 dimension
sheet_list2 <- sheet_list[sapply(sheet_list, function(x) dim(x)[1]) > 0]
sheet_list2
# code to read in each excel worksheet as individual dataframes
for (i in 2:length(sheet_list2)){assign(paste0("df", i), as.data.frame(sheet_list2[i]))}
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
# df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
data <- do.call(rbind,lapply(names(sheet_list2), function(x) cleaner(sheet_list2[[x]])))
data
# code to read in each excel worksheet as individual dataframes
for (i in 2:length(mysheets)){assign(paste0("df", i), as.data.frame(mysheets[i]))}
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
# remove serial comma from all variables
# df[,-1] <- as.numeric(gsub(",", "", as.matrix(df[,-1])))
# create numeric version of year variable for graphing
# df$Year <- as.numeric(substr(df$year, 1, 4))
# return cleaned df
return(df)
}
data <- do.call(rbind,lapply(names(mysheets), function(x) cleaner(mysheets[[x]])))
data
View(data)
max.print(data)
write.csv(data,example.csv)
write.csv(example.csv,data)
write.csv(example.csv,data)
write.csv(data, file = "MyData.csv")
View(data)
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
data
print(data)
cat("Print out the data frame \n")
datafile <- loadWorkbook("data.xlsm") # This file has dynamic links that are typical the case of excel file.
# ----------------
library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
mysheets <- read_excel_allsheets(datafile)
# ----------------
library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
# code to read in each excel worksheet as individual dataframes
for (i in 2:length(worksheets)){assign(paste0("df", i), as.data.frame(worksheets[i]))}
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
return(df)
}
data <- do.call(rbind,lapply(names(worksheets), function(x) cleaner(worksheets[[x]])))
# ----------------
library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
worksheets <- read_excel_allsheets("data.xlsm")
# code to read in each excel worksheet as individual dataframes
for (i in 2:length(worksheets)){assign(paste0("df", i), as.data.frame(worksheets[i]))}
# define function to clean data in each data frame (updated based on your data)
cleaner <- function(df){
# drop rows with missing values
df <- df[rowSums(is.na(df)) == 0,]
return(df)
}
data <- do.call(rbind,lapply(names(worksheets), function(x) cleaner(worksheets[[x]])))
data
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
data<-rbind(data1,data2)
data
data<-rbind(data1,data2)
print(data)
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/ExcelSheetCombine/main.R')
data<-rbind(data1,data1)
data
data2
data<-rbind(data2,data2)
cat("Print out the data frame \n")
print(data)
data<-rbind(data1,data2)
cat("Print out the data frame \n")
print(data)
data<-rbind.data.frame(data1,data2)
cat("Print out the data frame \n")
print(data)
data=rbind.fill(data1,dat2)
install.packages("plyr")
library(plyr)
data=rbind.fill(data1,dat2)
data2
data=rbind.fill(data1,data2)
cat("Print out the data frame \n")
print(data)
data=rbind.fill(data1,data1)
cat("Print out the data frame \n")
print(data)
data=rbind.fill(data1,data2)
cat("Print out the data frame \n")
print(data)
