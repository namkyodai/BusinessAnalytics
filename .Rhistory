rs[,2]
rs[,4]
rs[,5]
rs[,7]
rs[,6]
pagcordata = dbConnect(MySQL(), user='root', password='', dbname='pagcorps', host='localhost')
dbListTables(pagcordata)
dbListFields(pagcordata, 'analysis')
rs = dbSendQuery(pagcordata, "select * from analysis")
rs=dbFetch(rs)
rs[,6]
rs[,5]
summary(rs[,5])
summary(rs)
library(rattle)
rattle()
hydropairs(EbroPPtsMonthly[,2:4])
hydropairs(rs[,5:6])
sname2ts(EbroPPtsMonthly, sname="P9001", dates=1, var.type="Precipitation",
tstep.out="annual")
sname2plot(EbroPPtsMonthly, sname="P9001", var.type="Precipitation", pfreq="ma")
P9001
sname2plot(rs, sname="total_power_hour", var.type="Precipitation", pfreq="ma")
hydropairs(rs[,5:6])
library(DBI)
library(RODBC)
library(RMySQL)
pagcordata = dbConnect(MySQL(), user='root', password='', dbname='pagcorps', host='localhost')
dbListTables(pagcordata)
dbListFields(pagcordata, 'analysis')
rs = dbSendQuery(pagcordata, "select * from analysis")
rs=dbFetch(rs)
rs
library(rattle)
rattle()
library(hydroTSM)
hydropairs(rs[,5:6])
library(DBI)
library(RODBC)
library(RMySQL)
pagcordata = dbConnect(MySQL(), user='root', password='', dbname='pagcorps', host='localhost')
dbListTables(pagcordata)
dbListFields(pagcordata, 'analysis')
rs = dbSendQuery(pagcordata, "select * from analysis")
rs=dbFetch(rs)
rs
library(rattle)
rattle()
View(rs)
summary(total_power_hour)
summary(total_power_hours)
summary(rs$total_power_hours)
rs
rs[,3]
rs[,5]
summary(rs[,5])
summary(rs[,6])
summary(rs[,4])
summary(rs[,7])
library(DBI)
library(RODBC)
library(RMySQL)
data = dbConnect(MySQL(), user='root', password='', dbname='mwsi_plantaudit', host='localhost')
dbListTables(data)
dbListFields(data, 'thicknessdata')
rs = dbSendQuery(data, "select * from thicknessdata")
View(data)
rs=dbFetch(rs)
View(rs)
library(rattle)
rattle()
rs
rs[5]
summary(rs[5])
View(rs)
a=cbind(rs[5],rs[6],rs[7],rs[8])
a
booster_suction <-c(rs[5])
bs <-c(rs[5])
bs
rs[5,1]
rs[5,2]
rs[1,5]
bs <-c(rs[seq[1:5],5])
bs <-c(rs[seq(1:5),5])
bs
bs <-c(rs[seq(1:24),5])
bs
bs <-c(rs[seq(1:24),5],rs[seq(1:24),7])
bs
bs <-c(rs[seq(1:24),5],rs[seq(1:24),7],rs[seq(1:24),8])
bs
bs <-c(rs[seq(1:24),5],rs[seq(1:24),7],rs[seq(1:24),8])
summary(bs)
be <-c(rs[seq(1:24),11])
be
summary(be)
bd < c(rs[seq(1:24),12],rs[seq(1:24),13])
bd < c(rs[seq(1:24),12],rs[seq(1:24),13])
bd <- c(rs[seq(1:24),12],rs[seq(1:24),13])
bd
bde <c(rs[seq(1:24),17])
bde <-c(rs[seq(1:24),17])
bde
summary(bs,bse)
summary(bse)
1
1
bs <-c(rs[seq(1:24),5],rs[seq(1:24),7],rs[seq(1:24),8])
bse <-c(rs[seq(1:24),11])
bd <- c(rs[seq(1:24),12],rs[seq(1:24),13])
bde <-c(rs[seq(1:24),17])
summary(bs)
summary(bse)
summary(bd)
summary(bde)
#storage pumps
ss <-c(rs[seq(25:32),7],seq(25:32),9],seq(25:32),10])
#storage pumps
ss <-c(rs[seq(25:32),7],seq(25:32),9],seq(25:32),10])
#storage pumps
ss <-c(rs[seq(25:32),7],rs[seq(25:32),9],rs[seq(25:32),10])
ss
rs[seq(25:32),7]
rs[seq(1:32),7]
rs[seq(20:32),7]
rs[seq(20:21),7]
rs[seq(20:21),7]
rs[7]
rs[7](seq(20:24))
rs[7][20]
rs[,37]
rs[3,7]
rs[25,7]
rs[27,7]
rs[28,7]
rs[31,7]
rs[32,7]
rs[30,7]
rs[(30:31),7]
rs[(29:30),7]
#storage pumps
ss <-c(rs[(25:32),7],rs[(25:32),9],rs[(25:32),10])
ss]
ss
sse <-c(rs[(25:32),11])
sd <- c(rs[(25:32),12],rs[(25:32),13])
sde <-c(rs[(25:32),17])
summary(ss)
summary(sse)
summary(sd)
summary(sde)
#storage pumps
ss <-c(rs[(25:32),7],rs[(25:32),9],rs[(25:32),10])
sse <-c(rs[(25:32),11])
sd <- c(rs[(25:32),12],rs[(25:32),13],rs[(25:32),14],,rs[(25:32),15],,rs[(25:32),16])
sde <-c(rs[(25:32),17])
sd <- c(rs[(25:32),12],rs[(25:32),13],rs[(25:32),14],rs[(25:32),15],rs[(25:32),16])
sde <-c(rs[(25:32),17])
summary(ss)
summary(sse)
summary(sd)
summary(sde)
plot(ss)
plot.density(ss)
density(ss)
densityplot(ss)
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
densityplot(ss)
densityplot(sse)
densityplot(sd)
densityplot(sde)
library(plotly)
install.packages("plotly")
library(plotly)
carrots <- data.frame(length = rnorm(100000, 6, 2))
cukes <- data.frame(length = rnorm(50000, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="geom_density/multiple")
chart_link
p
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
p
carrots
carrots <- data.frame(length = rnorm(10, 6, 2))
carrots
cukes <- data.frame(length = rnorm(5, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
p
carrots <- bs#data.frame(length = rnorm(10, 6, 2))
cukes <- ss#data.frame(length = rnorm(5, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
carrots
carrots <- data.frame(bs)#data.frame(length = rnorm(10, 6, 2))
carrots
cukes <- data.frame(ss)#data.frame(length = rnorm(5, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
p
cuke
cukes
carrots
densityplot(bs)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0)
p <- ggplotly(p)
p
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 1)
p <- ggplotly(p)
p
vegLengths
carrots
cukes
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(carrots, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
p
#now make your lovely plot
p <- ggplot(carrots, aes(length)) + geom_density(col=NA,alpha = 0.2)
p
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots)
#now make your lovely plot
p <- ggplot(carrots, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
densityplot(ss)
densityplot(sse)
densityplot(sd)
par(mfrow=c(2,2))
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
par(mfrow=c(2,2))
densityplot(bs)
plot.new()
par(mfrow=c(2,2))
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
densityplot(ss)
densityplot(sse)
densityplot(sd)
densityplot(sde)
plot.new()
par(mfrow=c(2,2))
plot(bs)
plot(bse)
densityplot(bd)
plot(densityplot(bs))
par(mfrow=c(2,2))
plot(densityplot(bs))
plot.new()
par(mfrow=c(2,2))
plot(densityplot(bs))
dbs=density(bs)
dbse=density(bse)
dbse=density(bse)
dbs=density(bs)
bse <-c(rs[(1:24),11])
density(bse)
plot.new()
par(mfrow=c(2,2))
dbs=density(bs)
plot(dbs)     )
plot(dbs)
bse
dbse=density(bse,na.rm=T)
plot(dbse)
densityplot(bs)
densityplot(bse)
densityplot(bse, xlim="dfd")
densityplot(bse, xlab="dfd")
densityplot(bse, xlab="booster suction elbow")
densityplot(bs, xlab="booster suction")
densityplot(bs, xlab="booster suction")
densityplot(bse, xlab="booster suction elbow")
densityplot(bd,xlab="booster discharge")
densityplot(ss, xlab="storage suction")
densityplot(bde,xlab="booster discharge elbow")
densityplot(sse,, xlab="storage suction elbow")
densityplot(sd, , xlab="storage discharge")
densityplot(sde, , xlab="storage discharge elbow")
install.packages("fmsb")
#radar plot
library(fmsb)
# Create data: note in High school for Jonathan:
data=as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
data
colnames(data)=c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data=rbind(rep(20,10) , rep(0,10) , data)
data
# The default radar chart proposed by the library:
radarchart(data)
# The default radar chart proposed by the library:
plot.new()
radarchart(data)
library(DBI)
library(RODBC)
library(RMySQL)
library(xts)
library(ggplot2)
library(hydroTSM) #call the hydrology package for time series analysis
pagcordata = dbConnect(MySQL(), user='root', password='', dbname='maynilad_vil', host='localhost')
data = dbConnect(MySQL(), user='root', password='', dbname='maynilad_vil', host='localhost')
dbListTables(data)
dbListFields(data, 'analysisdate')
rs = dbSendQuery(data, "select * from analysisdate")
rs=dbFetch(rs, n = -1)
data=c(rs[2],rs[3],rs[4],rs[5])
a=as.Date(data$date,"%Y-%m-%d")
production=data$total_pro_hour
power=data$total_power_hour
ratio=data$ratio
data=data.frame(a,production,power,ratio)
hydropairs(data[,2:3])
#Plot production data
plot.new()
p=ggplot(data=data,aes(a, production))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
e
data = dbConnect(MySQL(), user='root', password='', dbname='maynilad_vil', host='localhost')
dbListTables(data)
dbListFields(data, 'analysisdate')
rs = dbSendQuery(data, "select * from analysisdate")
rs=dbFetch(rs, n = -1)
rs
data=c(rs[2],rs[7],rs[20],rs[21])
a=as.Date(data$date,"%Y-%m-%d")
production=data$total_pro_hour
power=data$total_power_hour
ratio=data$ratio
data=data.frame(a,production,power,ratio)
hydropairs(data[,2:3])
#Plot production data
plot.new()
p=ggplot(data=data,aes(a, production))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#p
min <- as.Date("2014-01-01")
#p
min <- as.Date("2014-01-01")
max <-  as.Date("2018-10-31")
#p + scale_x_date(limits = c(min, max))
pp=p+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Production hourly",x="Years",y="MLD")+scale_y_continuous(limits=c(0,20))#+ stat_smooth(method="lm")
print(pp)
production
max(production)
#p + scale_x_date(limits = c(min, max))
pp=p+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Production hourly",x="Years",y="MLD")+scale_y_continuous(limits=c(0,10))#+ stat_smooth(method="lm")
print(pp)
min <- as.Date("2014-01-01")
max <-  as.Date("2014-12-30")
#p + scale_x_date(limits = c(min, max))
p+scale_x_date(date_labels = "%m",date_breaks="month",limits = c(min, max))+labs(title = "Production hourly",x="months",y="MLD")+scale_y_continuous(limits=c(0,10))
#p
min <- as.Date("2014-07-01")
max <-  as.Date("2018-10-31")
#p + scale_x_date(limits = c(min, max))
pp=p+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Production hourly",x="Years",y="MLD")+scale_y_continuous(limits=c(0,10))#+ stat_smooth(method="lm")
print(pp)
min <- as.Date("2014-07-01")
max <-  as.Date("2014-12-30")
#p + scale_x_date(limits = c(min, max))
p+scale_x_date(date_labels = "%m",date_breaks="month",limits = c(min, max))+labs(title = "Production hourly",x="months",y="MLD")+scale_y_continuous(limits=c(0,10))
min <- as.Date("2014-07-01")
max <-  as.Date("2014-12-30")
#p + scale_x_date(limits = c(min, max))
p+scale_x_date(date_labels = "%m",date_breaks="month",limits = c(min, max))+labs(title = "Production hourly",x="months",y="MLD")+scale_y_continuous(limits=c(2.5,5))
#Plot power consumption data
plot.new()
q=ggplot(data=data,aes(a, power))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#q
min <- as.Date("2014-07-01")
max <-  as.Date("2018-10-31")
q=ggplot(data=data,aes(a, power))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#q
min <- as.Date("2014-07-01")
max <-  as.Date("2018-10-31")
#p + scale_x_date(limits = c(min, max))
qq=q+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Power hourly",x="Years",y="KW")+scale_y_continuous(limits=c(0,2500))#+ stat_smooth(method="lm")
print(qq)
#p + scale_x_date(limits = c(min, max))
qq=q+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Power hourly",x="Years",y="KW")+scale_y_continuous(limits=c(0,1500))#+ stat_smooth(method="lm")
print(qq)
plot.new()
w=ggplot(data=data,aes(a, ratio))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#w
min <- as.Date("2014-07-01")
max <-  as.Date("2018-19-31")
#p + scale_x_date(limits = c(min, max))
ww=w+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Ratio",x="Years",y="")+scale_y_continuous(limits=c(0,250))#+ stat_smooth(method="lm")
print(ww)
#p + scale_x_date(limits = c(min, max))
ww=w+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Ratio",x="Years",y="")+scale_y_continuous(limits=c(0,450))#+ stat_smooth(method="lm")
print(ww)
source('C:/Dropbox/workspace/RProjects/PlantAudit/VIL/energyaudit.R')
source('C:/Dropbox/workspace/RProjects/PlantAudit/VIL/energyaudit.R')
source('E:/ETH/ETH-02082011/1-Rmarkov/markovgiventheta.R')
library(DBI)
library(RODBC)
library(RMySQL)
library(xts)
library(ggplot2)
library(hydroTSM) #call the hydrology package for time series analysis
dataproduction = dbConnect(MySQL(), user='root', password='', dbname='maynilad_asv', host='localhost')
dbListTables(dataproduction)
dbListFields(dataproduction, 'analysisdate')
library(rattle)
rattle()
library(lattice)
library(nutshell)
install.packages("nutshell")
data(births2006.smpl)
data(births2006.smpl)
data(births2006)
library(nutshell)
data(births2006)
data(births2006.smpl)
births2006.smpl[1:5,]
View(births2006.smpl)
dim(births2006.smpl)
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
births2006.smpl$DOB_WK
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
xlab="Day of Week",col="black")barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,
xlab="Day of Week",col="black")barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,xlab="Day of Week",col="black")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,xlab="Day of Week",col="black")
plot(cars)
source("example.R"")
setwd("C:/Dropbox/workspace/RProjects/BusinessAnalytics")
source("example.R"")
plot(cars)
source('example.R', echo = TRUE)
source('example.R', echo = TRUE)
source('example.R', echo = TRUE)
source('example.R', echo = TRUE, prompt.echo = "", spaced = F)
source('example.R', echo = T, prompt.echo = "", spaced = F)
source("example.R", echo = T, prompt.echo = "", spaced = F)
source("example.R", echo = T, prompt.echo = "", spaced = F)
source("example.R", echo = T, prompt.echo = "", spaced = F)
source("example.R", echo = T, prompt.echo = "", spaced = F)
plot(cars)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
#births2006.smpl[1:5,]
births.dow=table(births2006.smpl$DOB_WK)
births.dow
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
barchart(births.dow,ylab="Day of Week",col="black")
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
source("birth_statistic.R", echo = T, prompt.echo = "", spaced = F)
